/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package vendor;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

import com.comp.common.Visitor;
import com.comp.semantic_analyser.NodeType;

import java.util.List;

public interface Node {

    /**
     * This method is called after the node has been made the current
     * node.  It indicates that child nodes can now be added to it.
     */
    void jjtOpen();

    /**
     * This method is called after all the child nodes have been
     * added.
     */
    void jjtClose();

    /**
     * This pair of methods are used to inform the node of its
     * parent.
     */
    void jjtSetParent(Node n);

    Node jjtGetParent();

    /**
     * This method tells the node to add its argument to the node's
     * list of children.
     */
    void jjtAddChild(Node n, int i);

    /**
     * This method returns a child node.  The children are numbered
     * from zero, left to right.
     */
    Node jjtGetChild(int i);

    /**
     * Return the number of children the node has.
     */
    int jjtGetNumChildren();

    /**
     * Returns this node's value
     * @return Object
     */
    Object getValue();

    /**
     * Returns this node's value as a string
     * @return String
     */
    String getValueToString();

    /**
     * Returns this node's line
     * @return
     */
    int getLine();

    /**
     * Returns this node's column
     * @return
     */
    int getColumn();

    /**
     * Customs methods below
     */

    /**
     * Accepts a visitor
     * @param visitor
     */
    void accept(Visitor visitor);

    /**
     * Returns true if the node has children; false otherwise
     * @return boolean
     */
    boolean hasChildren();

    /**
     * Finds and returns the first child which is of the specified type
     * @param type
     * @return Node
     */
    Node getChildOfType(NodeType type);

    /**
     * Finds and returns a list of children which are of the specified type
     * @param type
     * @return List<Node>
     */
    List<Node> getChildrenOfType(NodeType type);

    /**
     * Returns true if the node has at least one child of the specified type; false otherwise
     * @param type
     * @return boolean
     */
    boolean hasChildOfType(NodeType type);

    /**
     * Returns true if the node is of the specified type; false otherwise
     * @param type
     * @return
     */
    boolean isOfType(NodeType type);

    /**
     * Return the first (counting bottom up) ancestor of the specified type
     * @param type
     * @return Node the ancestor, or null if not found
     */
    Node getAncestorOfType(NodeType type);

    /**
     * Finds and returns the first sibling which is of the specified type
     * @param type
     * @return Node
     */
    Node getSiblingOfType(NodeType type);

    /**
     * Returns true if the node has a sibling of the specified type; false otherwise
     * @param type
     * @return
     */
    boolean hasSiblingOfType(NodeType type);

    /**
     * Returns true if the node has an ancestor of the specified type; false otherwise
     * @param type
     * @return
     */
    boolean hasAncestorOfType(NodeType type);
}
/* JavaCC - OriginalChecksum=8c6fb5c36a36f9402a1d80231d754861 (do not edit this line) */
