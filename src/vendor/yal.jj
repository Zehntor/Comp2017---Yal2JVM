/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */


options
{
  JDK_VERSION = "1.8";
  STATIC      = true;
  LOOKAHEAD   = 1;
}


PARSER_BEGIN(Parser)

package vendor;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
}

PARSER_END(Parser)



//GRAMATICA

//simbolos nao considerados na analise
<DEFAULT> SKIP : {
  	 " "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| < "*/" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
}

// definicao dos tokens (simbolos terminais)
<DEFAULT> TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">

}

// definicao da producao
<DEFAULT> TOKEN : {
    <INTEGER: (<DIGIT>)+>
    	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
    	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    	| <#DIGIT: ["0"-"9"]>
    	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*//*@bgen(jjtree) Module */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTMODULE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Module()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/        /*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Module()       : {Token t0; Token t1;}
{
    <MODULE> (t0=<ID>/*@bgen(jjtree) ModuleId */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTMODULEID);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                      }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/          )
    <LCHAVETA>
        (LOOKAHEAD(4)/*@bgen(jjtree) Declaration */
                      {
                        SimpleNode jjtn002 = new SimpleNode(JJTDECLARATION);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*/ Declaration()/*@bgen(jjtree)*/
                      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          throw (RuntimeException)jjte002;
                        }
                        if (jjte002 instanceof ParseException) {
                          throw (ParseException)jjte002;
                        }
                        throw (Error)jjte002;
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
                      }
/*@egen*/             )*
        (LOOKAHEAD(4)/*@bgen(jjtree) Function */
                      {
                        SimpleNode jjtn003 = new SimpleNode(JJTFUNCTION);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*/ Function()/*@bgen(jjtree)*/
                      } catch (Throwable jjte003) {
                        if (jjtc003) {
                          jjtree.clearNodeScope(jjtn003);
                          jjtc003 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                          throw (RuntimeException)jjte003;
                        }
                        if (jjte003 instanceof ParseException) {
                          throw (ParseException)jjte003;
                        }
                        throw (Error)jjte003;
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/          )*
    (t1=<RCHAVETA>/*@bgen(jjtree) ModuleEnd */
                   {
                     SimpleNode jjtn004 = new SimpleNode(JJTMODULEEND);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                   }
/*@egen*/ {jjtn004.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
                   }
/*@egen*/           )
}

// A declaration can only be an INT or INT[]
void Declaration()       : {Token t0; Token t1; Token t2;}
{
    t0=<ID>/*@bgen(jjtree) DeclarationId */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTDECLARATIONID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/                ["["/*@bgen(jjtree) IsArray */
                                                                {
                                                                  SimpleNode jjtn002 = new SimpleNode(JJTISARRAY);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
                                                                }
                                                                try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
                                                                }
/*@egen*/         ]

    (<ASSIGN> (("["/*@bgen(jjtree) ArraySize */
                    {
                      SimpleNode jjtn003 = new SimpleNode(JJTARRAYSIZE);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/ ArraySize()/*@bgen(jjtree)*/
                    } catch (Throwable jjte003) {
                      if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        throw (RuntimeException)jjte003;
                      }
                      if (jjte003 instanceof ParseException) {
                        throw (ParseException)jjte003;
                      }
                      throw (Error)jjte003;
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
                    }
/*@egen*/            "]")
        | (t1=<ADDSUB_OP>/*@bgen(jjtree) AddSubOp */
                          {
                            SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                          }
/*@egen*/ {jjtn004.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
                          }
/*@egen*/
				         )?
		t2=<INTEGER>/*@bgen(jjtree) InitVar */
                             {
                               SimpleNode jjtn005 = new SimpleNode(JJTINITVAR);
                               boolean jjtc005 = true;
                               jjtree.openNodeScope(jjtn005);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn005, true);
                               jjtc005 = false;
                             }
/*@egen*/ {jjtn005.getInfoFromToken(t2);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc005) {
                                 jjtree.closeNodeScope(jjtn005, true);
                               }
                             }
/*@egen*/
				        ))?
		<PVIRG>
}

void Function()       : {Token t0; Token t1; Token t2; Token t3;}
{
    <FUNCTION>

    // Without return
    (
        LOOKAHEAD(2) (t0=<ID>/*@bgen(jjtree) FunctionId */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTFUNCTIONID);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/             <LPAR> (/*@bgen(jjtree) Args */
                                                                                  {
                                                                                    SimpleNode jjtn002 = new SimpleNode(JJTARGS);
                                                                                    boolean jjtc002 = true;
                                                                                    jjtree.openNodeScope(jjtn002);
                                                                                  }
                                                                                  try {
/*@egen*/Varlist()/*@bgen(jjtree)*/
                                                                                  } catch (Throwable jjte002) {
                                                                                    if (jjtc002) {
                                                                                      jjtree.clearNodeScope(jjtn002);
                                                                                      jjtc002 = false;
                                                                                    } else {
                                                                                      jjtree.popNode();
                                                                                    }
                                                                                    if (jjte002 instanceof RuntimeException) {
                                                                                      throw (RuntimeException)jjte002;
                                                                                    }
                                                                                    if (jjte002 instanceof ParseException) {
                                                                                      throw (ParseException)jjte002;
                                                                                    }
                                                                                    throw (Error)jjte002;
                                                                                  } finally {
                                                                                    if (jjtc002) {
                                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                                    }
                                                                                  }
/*@egen*/      )? <RPAR>
    )

    |

    // With return
    (
        (t0=<ID>/*@bgen(jjtree) ReturnId */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTRETURNID);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {jjtn003.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/          ) (("[" "]"/*@bgen(jjtree) ReturnIsArray */
                                                                      {
                                                                        SimpleNode jjtn004 = new SimpleNode(JJTRETURNISARRAY);
                                                                        boolean jjtc004 = true;
                                                                        jjtree.openNodeScope(jjtn004);
                                                                      }
                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn004, true);
                                                                        jjtc004 = false;
                                                                      }
/*@egen*/ {jjtn004.setValue("[]");}/*@bgen(jjtree)*/
                                                                      } finally {
                                                                        if (jjtc004) {
                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                        }
                                                                      }
/*@egen*/               )?)
        <ASSIGN>
        t1=<ID>/*@bgen(jjtree) FunctionId */
                {
                  SimpleNode jjtn005 = new SimpleNode(JJTFUNCTIONID);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn005, true);
                  jjtc005 = false;
                }
/*@egen*/ {jjtn005.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/             <LPAR> (/*@bgen(jjtree) Args */
                                                                    {
                                                                      SimpleNode jjtn006 = new SimpleNode(JJTARGS);
                                                                      boolean jjtc006 = true;
                                                                      jjtree.openNodeScope(jjtn006);
                                                                    }
                                                                    try {
/*@egen*/Varlist()/*@bgen(jjtree)*/
                                                                    } catch (Throwable jjte006) {
                                                                      if (jjtc006) {
                                                                        jjtree.clearNodeScope(jjtn006);
                                                                        jjtc006 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte006 instanceof RuntimeException) {
                                                                        throw (RuntimeException)jjte006;
                                                                      }
                                                                      if (jjte006 instanceof ParseException) {
                                                                        throw (ParseException)jjte006;
                                                                      }
                                                                      throw (Error)jjte006;
                                                                    } finally {
                                                                      if (jjtc006) {
                                                                        jjtree.closeNodeScope(jjtn006, true);
                                                                      }
                                                                    }
/*@egen*/      )? <RPAR>)
    )

    <LCHAVETA>
        (/*@bgen(jjtree) FunctionBody */
         {
           SimpleNode jjtn007 = new SimpleNode(JJTFUNCTIONBODY);
           boolean jjtc007 = true;
           jjtree.openNodeScope(jjtn007);
         }
         try {
/*@egen*/Stmtlst()/*@bgen(jjtree)*/
         } catch (Throwable jjte007) {
           if (jjtc007) {
             jjtree.clearNodeScope(jjtn007);
             jjtc007 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte007 instanceof RuntimeException) {
             throw (RuntimeException)jjte007;
           }
           if (jjte007 instanceof ParseException) {
             throw (ParseException)jjte007;
           }
           throw (Error)jjte007;
         } finally {
           if (jjtc007) {
             jjtree.closeNodeScope(jjtn007, true);
           }
         }
/*@egen*/              )
    (t3=<RCHAVETA>/*@bgen(jjtree) FunctionEnd */
                   {
                     SimpleNode jjtn008 = new SimpleNode(JJTFUNCTIONEND);
                     boolean jjtc008 = true;
                     jjtree.openNodeScope(jjtn008);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn008, true);
                     jjtc008 = false;
                   }
/*@egen*/ {jjtn008.getInfoFromToken(t3);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc008) {
                       jjtree.closeNodeScope(jjtn008, true);
                     }
                   }
/*@egen*/             )
}

// melhorar identificacao de array
void Varlist()       : {Token t0; Token t1;}
{
  ((t0=<ID>/*@bgen(jjtree) VarId */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTVARID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/       ) ("["/*@bgen(jjtree) IsArray */
                                                         {
                                                           SimpleNode jjtn002 = new SimpleNode(JJTISARRAY);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
                                                         }
                                                         try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002, true);
                                                           }
                                                         }
/*@egen*/         )?)
  ( <VIRG> (t1=<ID>/*@bgen(jjtree) VarId */
                    {
                      SimpleNode jjtn003 = new SimpleNode(JJTVARID);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtc003 = false;
                    }
/*@egen*/ {jjtn003.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
                    }
/*@egen*/       )
  ("["/*@bgen(jjtree) IsArray */
       {
         SimpleNode jjtn004 = new SimpleNode(JJTISARRAY);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
       }
       try {
/*@egen*/ "]"/*@bgen(jjtree)*/
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004, true);
         }
       }
/*@egen*/         )? )*
}


void ArrayElement()       : {Token t;}
{
    (t=<ID>/*@bgen(jjtree) ArrayId */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/ {jjtn001.getInfoFromToken(t);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/         ) "[" "]"
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        SimpleNode jjtn000 = new SimpleNode(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree) ScalarId */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/ {jjtn001.getInfoFromToken(t);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/          /*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
    try {
/*@egen*/
    (/*@bgen(jjtree) Stmt */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTSTMT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/Stmt()/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/      )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmt()       : {}
{
  While() | If() | (LOOKAHEAD(3) Assign() |  Call() <PVIRG> )

 /*
 {System.out.println("while in");} While() | {System.out.println("if in");} If() |
 <ID> ( LOOKAHEAD(2)
 ({System.out.println("assign in");} ( ("[" Index() "]") | ("." <SIZE>)? ) //:lhs()
    <ASSIGN> Rhs() <PVIRG>
 ) //assign
 |
  ({System.out.println("call in");} ("." <ID>)? <LPAR> (ArgumentList())? <RPAR>
  <PVIRG>)//call
 )*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Lhs() : {/*@bgen(jjtree) Lhs */
              SimpleNode jjtn000 = new SimpleNode(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0; Token sizeToken;}
{/*@bgen(jjtree) Lhs */
    try {
/*@egen*/
    //ArrayAccess() | ScalarAccess()
    t0=<ID> {jjtn000.getInfoFromToken(t0);} (
        ("[" Index() "]") | ("." sizeToken=<SIZE> {jjtn000.getInfoFromToken(sizeToken);})?
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
              SimpleNode jjtn000 = new SimpleNode(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Rhs */
    try {
/*@egen*/
    (/*@bgen(jjtree) Term */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTTERM);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        Term()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       [(
            t=<ARITH_OP>/*@bgen(jjtree) ArithOp */
                         {
                           SimpleNode jjtn002 = new SimpleNode(JJTARITHOP);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/ {jjtn002.getInfoFromToken(t);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/          |
            t=<BITWISE_OP>/*@bgen(jjtree) BitwiseOp */
                           {
                             SimpleNode jjtn003 = new SimpleNode(JJTBITWISEOP);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                           }
/*@egen*/ {jjtn003.getInfoFromToken(t);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
                           }
/*@egen*/            |
            t=<ADDSUB_OP>/*@bgen(jjtree) AddSubOp */
                          {
                            SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                          }
/*@egen*/ {jjtn004.getInfoFromToken(t);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
                          }
/*@egen*/          
        )/*@bgen(jjtree) Term */
          {
            SimpleNode jjtn005 = new SimpleNode(JJTTERM);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
          }
          try {
/*@egen*/ Term()/*@bgen(jjtree)*/
          } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              throw (RuntimeException)jjte005;
            }
            if (jjte005 instanceof ParseException) {
              throw (ParseException)jjte005;
            }
            throw (Error)jjte005;
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
            }
          }
/*@egen*/       ]
    )
    |
    "["/*@bgen(jjtree) ArrSize */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTARRSIZE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/ ArraySize()/*@bgen(jjtree)*/
        } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            throw (RuntimeException)jjte006;
          }
          if (jjte006 instanceof ParseException) {
            throw (ParseException)jjte006;
          }
          throw (Error)jjte006;
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/          "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArraySize()       : {Token tSize;}
{/*@bgen(jjtree) Scalar */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTSCALAR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ScalarAccess()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/        
    |
    tSize=<INTEGER>/*@bgen(jjtree) Integer */
                    {
                      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.getInfoFromToken(tSize);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/         
}

void Term()      : {Token tInt; Token t0; Token t1; Token tSize; Token tOp;}
{
    (tOp=<ADDSUB_OP>/*@bgen(jjtree) AddSubOp */
                     {
                       SimpleNode jjtn001 = new SimpleNode(JJTADDSUBOP);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/ {jjtn001.getInfoFromToken(tOp);}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/          )?

    (tInt=<INTEGER>/*@bgen(jjtree) Integer */
                    {
                      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.getInfoFromToken(tInt);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/         
    | ( (t0=<ID>/*@bgen(jjtree) Id */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTID);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {jjtn003.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/    )
            ( LOOKAHEAD(2)
            (("." (t1=<ID>/*@bgen(jjtree) Id2 */
                           {
                             SimpleNode jjtn004 = new SimpleNode(JJTID2);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                           }
/*@egen*/ {jjtn004.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/     ))?
         <LPAR> (/*@bgen(jjtree) ArgumentList */
                 {
                   SimpleNode jjtn005 = new SimpleNode(JJTARGUMENTLIST);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                 }
                 try {
/*@egen*/ArgumentList()/*@bgen(jjtree)*/
                 } catch (Throwable jjte005) {
                   if (jjtc005) {
                     jjtree.clearNodeScope(jjtn005);
                     jjtc005 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte005 instanceof RuntimeException) {
                     throw (RuntimeException)jjte005;
                   }
                   if (jjte005 instanceof ParseException) {
                     throw (ParseException)jjte005;
                   }
                   throw (Error)jjte005;
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
                 }
/*@egen*/              )? <RPAR>/*@bgen(jjtree) IsFunc */
                                                       {
                                                         SimpleNode jjtn006 = new SimpleNode(JJTISFUNC);
                                                         boolean jjtc006 = true;
                                                         jjtree.openNodeScope(jjtn006);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn006, true);
                                                         jjtc006 = false;
                                                       }
/*@egen*/ {jjtn006.setValue("IsFunc"); }/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc006) {
                                                           jjtree.closeNodeScope(jjtn006, true);
                                                         }
                                                       }
/*@egen*/        )
        | ( ("[" Index() /*#Index*/ "]") | ("." tSize=<SIZE>/*@bgen(jjtree) Size */
                                                             {
                                                               SimpleNode jjtn007 = new SimpleNode(JJTSIZE);
                                                               boolean jjtc007 = true;
                                                               jjtree.openNodeScope(jjtn007);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn007, true);
                                                               jjtc007 = false;
                                                             }
/*@egen*/ {jjtn007.getInfoFromToken(tSize);}/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc007) {
                                                                 jjtree.closeNodeScope(jjtn007, true);
                                                               }
                                                             }
/*@egen*/      )? ))
        ))
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
                   SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Exprtest */
    try {
/*@egen*/
    <LPAR>
        Lhs() t=<RELA_OP> {jjtn000.getInfoFromToken(t);}
        Rhs()
    <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
                SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0;}
{/*@bgen(jjtree) While */
    try {
/*@egen*/
    <WHILE> Exprtest() <LCHAVETA>
        Stmtlst()
    (t0=<RCHAVETA>/*@bgen(jjtree) WhileEnd */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTWHILEEND);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/          )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
             SimpleNode jjtn000 = new SimpleNode(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0; Token t1; Token t2;}
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> Exprtest() <LCHAVETA>
        Stmtlst()
    (t0=<RCHAVETA>/*@bgen(jjtree) IfEnd */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTIFEND);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/       )
    (
    (t1=<ELSE>/*@bgen(jjtree) Else */
               {
                 SimpleNode jjtn002 = new SimpleNode(JJTELSE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtc002 = false;
               }
/*@egen*/ {jjtn002.getInfoFromToken(t1);}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/      ) <LCHAVETA>
        Stmtlst()
    (t2=<RCHAVETA>/*@bgen(jjtree) ElseEnd */
                   {
                     SimpleNode jjtn003 = new SimpleNode(JJTELSEEND);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                   }
/*@egen*/ {jjtn003.getInfoFromToken(t2);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
                   }
/*@egen*/         ))?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Call()       : {Token t0; Token t1;}
{
    (t0=<ID>/*@bgen(jjtree) CallId */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTCALLID);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/        )
    ("." (t1=<ID>/*@bgen(jjtree) CallId2 */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTCALLID2);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                  }
/*@egen*/ {jjtn002.getInfoFromToken(t1);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/         ))? <LPAR> (/*@bgen(jjtree) ArgumentList */
                                                                      {
                                                                        SimpleNode jjtn003 = new SimpleNode(JJTARGUMENTLIST);
                                                                        boolean jjtc003 = true;
                                                                        jjtree.openNodeScope(jjtn003);
                                                                      }
                                                                      try {
/*@egen*/ArgumentList()/*@bgen(jjtree)*/
                                                                      } catch (Throwable jjte003) {
                                                                        if (jjtc003) {
                                                                          jjtree.clearNodeScope(jjtn003);
                                                                          jjtc003 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte003 instanceof RuntimeException) {
                                                                          throw (RuntimeException)jjte003;
                                                                        }
                                                                        if (jjte003 instanceof ParseException) {
                                                                          throw (ParseException)jjte003;
                                                                        }
                                                                        throw (Error)jjte003;
                                                                      } finally {
                                                                        if (jjtc003) {
                                                                          jjtree.closeNodeScope(jjtn003, true);
                                                                        }
                                                                      }
/*@egen*/              )? <RPAR>
}

void ArgumentList()       : {}
{
    Argument() (<VIRG> Argument())*
}

void Argument() : {/*@bgen(jjtree) Argument */
                   SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    (/*@bgen(jjtree) ArgumentId */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTARGUMENTID);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        t=<ID>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/            
        |/*@bgen(jjtree) String */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
        t=<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/        
        |/*@bgen(jjtree) Integer */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
        t=<INTEGER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/         
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {jjtn000.getInfoFromToken(t);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayAccess()       : {Token t;}
{
    (t=<ID>/*@bgen(jjtree) ArrayId */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/ {jjtn001.getInfoFromToken(t);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/         )
    "[" (/*@bgen(jjtree) ArrayIndex */
         {
           SimpleNode jjtn002 = new SimpleNode(JJTARRAYINDEX);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
         }
         try {
/*@egen*/Index()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
           }
         }
/*@egen*/            ) "]"
}

void ScalarAccess()       : {Token t0; Token sizeToken;}
{
    t0=<ID>/*@bgen(jjtree) ScalarId */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/ {jjtn001.getInfoFromToken(t0);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/          
    ["." sizeToken=<SIZE>/*@bgen(jjtree) ScalarSize */
                          {
                            SimpleNode jjtn002 = new SimpleNode(JJTSCALARSIZE);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.getInfoFromToken(sizeToken);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/             ]
}

void Index() : {/*@bgen(jjtree) Index */
                SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree) IndexId */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTINDEXID);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/ {jjtn001.getInfoFromToken(t);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/         
    |
    t=<INTEGER>/*@bgen(jjtree) Integer */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                }
/*@egen*/ {jjtn002.getInfoFromToken(t);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/         /*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



